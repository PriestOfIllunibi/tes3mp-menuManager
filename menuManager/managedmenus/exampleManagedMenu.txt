{																																								|
  "main":{																																						|
	"menuType":"CustomMessageBox",																																| menuType defines what type of menu is going to be loaded.
	"idGui":779000,																																				| The idGui to be used when loading the menu and saved as the key for its lookup value.
	"label":"This is the 'main' menu (aka example CustomMessageBox one).\nNote that in the file, its buttons are made up of a keyless array.",					| A basic string label (the title text on most menus).
	"buttons":[																																					| Buttons are loaded and concatonated together with ";" deliminators ingame. Note how
	  "Run testFunction case 0",																																| this array of buttons has no keys for its values due to the square brackets.
	  "Show example CustomMessageBox two",																														|
	  "Show example CustomMessageBox three",																													|
	  "Show example ListBox",																																	|
	  "Show example _MessageBox",																																|
	  "Show example InputDialog",																																|
	  "Show example PasswordDialog",																															|
	  "Exit menu"																																				|
	],																																							|
	"destinations":{																																			| The destinations array. Destinations MUST have keys for their values.
	  "-1":"local pid = ... return menuManager.showMenu(pid, 779000)",																							| Take special note of this "-1" value -- buttons, when loaded, cannot have a value output
	  "0":"local pid = ... return exampleManagedMenu.testFunction(pid, 0, 779000)",																				| less than 0, meaning that destination can only be reached by an external function.
	  "1":"local pid = ... return menuManager.showMenu(pid, 779001)",																							| Check the example.lua to see an example of this in practice.
	  "2":"local pid = ... return menuManager.showMenu(pid, 779002)",																							| Also take special note of the "local pid = ..." declaration - you can also use this to
	  "3":"local pid = ... return menuManager.showMenu(pid, 779003)",																							| pass multiple chunks of data through an "any" return if needed.
	  "4":"local pid = ... return menuManager.showMenu(pid, 779004)",																							|
	  "5":"local pid = ... return menuManager.showMenu(pid, 779005)",																							|
	  "6":"local pid = ... return menuManager.showMenu(pid, 779006)",																							|
	  "7":"return"																																				| Simple 'graceful exit' destination. Note that this is optional unless you have an "any"
	}																																							| destination, however even without one it will still generate debug messages.
  },																																							|
  "exampleCustomMessageBoxTwo":{																																|
    "menuType":"CustomMessageBox",																																|
	"idGui":779001,																																				| Note the "/s" at the start of the label. This identifies the label as a string to
	"label":"/s   This is example menu two.\nNote that its buttons are made up of an enumerated array.															| menuManager when initializing a menu. Not strictly necessary, but a quality of life
	\nTo show that excess whitespace is properly removed, there is five characters of whitespace after this message, and three after the starting /s.     ",	| measure. Also note that there is excess whitespace before and after the text that gets
	"buttons":{																																					| stripped later.
	  "0":"Go back to main menu",																																| Note that these buttons have keys for their values, signifying a specific order. Not strictly
	  "1":"Run testFunction case 1"																																| necessary, but also a quality of life measure, as it allows you to correspond buttons to 
	},																																							| destinations. Note also that this array CANNOT have gaps (ex. you could not have "2" 
	"destinations":{																																			| be nil and "3" exist).
	  "-1":"local pid = ... return menuManager.showMenu(pid, 779001)",																							| Take note of the "any" destination in this array - this allows the menu to return a "catch-all" if
	  "0":"local pid = ... return menuManager.showMenu(pid, 779000)",																							| it receives any unexpected destination calls (ex. a button that has no explicit destination, 
	  "1":"local pid = ... return exampleManagedMenu.testFunction(pid, 1, 779001)",																				| or a return composed of the user's keyboard input). Also note the "multiple chunks of data"
	  "any":"local pid, data = ... return menuManager.showMenu(pid, 779001)"																					| passthrough in practice (though it is not explicitly used here).
	}																																							|
  },																																							|
  "exampleCustomMessageBoxThree":{																																|
    "menuType":"CustomMessageBox",																																|
	"idGui":779002,																																				|
	"label":"/f return exampleManagedMenu.CustomMessageBoxLabel()",																								| Note that labels can return functions just as they can return strings, allowing for dynamic content.
	"buttons":"Go back to main menu;Run testFunction case 2",																									|
	"destinations":{																																			|
	  "0":"local pid = ... return menuManager.showMenu(pid, 779000)",																							|
	  "1":"local pid = ... return exampleManagedMenu.testFunction(pid, 2, 779002)"																				|
	}																																							|
  },																																							|
  "exampleListBox":{																																			|
    "menuType":"ListBox",																																		| Listboxes can also be generated using menuManager.
	"idGui":779003,																																				|
	"label":"/f return exampleManagedMenu.playerListLabel()",																									|
	"dataSource":"return exampleManagedMenu.playerList()",																										| Note that a new variable, dataSource is required. This is to fill the 'list' in the menu with data.
	"destinations":{																																			| For now, dataSource MUST be a function. If you wish for static content in this list, simply define
	  "any":"local pid = ... return menuManager.showMenu(pid, 779000)"																							| your function to return the same content every time.
	}																																							|
  },																																							|
  "example_MessageBox":{																																		|
    "menuType":"_MessageBox",																																	| _MessageBoxes can also be generated. Note that they are very simple as they have no input vectors,
	"idGui":779004,																																				| and therefore cannot have destinations.
	"label":"This is just a _MessageBox."																														|
  },																																							|
  "exampleInputDialog":{																																		|
    "menuType":"Dialog",																																		| Dialogs can also be generated. Note that whether a Dialog is considered an InputDialog or a
	"idGui":779005,																																				| PasswordDialog is only dependent on the "hidden" variable (which is not needed at all in InputDialogs).
	"label":"This is just an InputDialog.",																														|
	"note":"/f return \"The only fancy thing about it is that this note is a function instead of a regular string.\"",											| Note that Notes can also be function returns.
	"destinations":{																																			|
	  "0":"local pid = ... return menuManager.showMenu(pid, 779000)",																							| Another example of returning regular content as well as an "any" fallback.
	  "1":"local pid = ... return menuManager.showMenu(pid, 779001)",																							| Note that only integers can be used for regular destination calls - string based data will ALWAYS be
	  "2":"local pid = ... return menuManager.showMenu(pid, 779002)",																							| referred to the "any" destination (due to the complexity of verifying a string return is actually a string).
	  "3":"local pid = ... return menuManager.showMenu(pid, 779003)",																							| Use an external function call from "any" to more specifically handle string returns, if necessary.
	  "4":"local pid = ... return menuManager.showMenu(pid, 779004)",																							|
	  "5":"local pid = ... return menuManager.showMenu(pid, 779005)",																							|
	  "6":"local pid = ... return menuManager.showMenu(pid, 779006)",																							|
	  "any":"local pid = ... return menuManager.showMenu(pid, 779000)"																							|
	}																																							|
  },																																							|
  "examplePasswordDialog":{																																		|
    "menuType":"Dialog",																																		|
	"idGui":779006,																																				|
	"hidden":true,																																				| This is the "hidden" variable I was talking about. Note that a dialog will ONLY show as a PasswordDialog
	"label":"This is just a PasswordDialog.",																													| if hidden is boolean true.
	"note":"/sNote that this note has no whitespace between its /s and the string itself, but will still work all the same.",									|
	"destinations":{																																			|
	  "any":"local pid = ... return menuManager.showMenu(pid, 779000)"																							|
	}																																							|
  }																																								|
}																																								|
